#include <string.h>
#include <time.h>
#include <stdlib.h>

constexpr int CONTROL_ROOM_RESPONSE_SIZE{7};
constexpr int BAUD_RATE{9600};

constexpr char CTRL_ACTI[] = "CtrlActi";
constexpr char TEST_ACTI[] = "TestActi";
constexpr char LOG_STR[] = "LogStart";
constexpr char INERT_FLW[] = "InertFlw"; //Inert Gas Flowing
constexpr char ABORT_SIG[] = "AbortStp" //Terminate

char dataIn[16];  //Using a regular C-style array
String incoming_Signal;

struct sensors {
  float loadCell;
  float thermocouple;
  float pressure[6];
};
sensors sensorData{0};

void setup() {
  Serial.begin(BAUD_RATE);  //Start Serial1 for communication with Control Room
  
  //Add a temporarily valve pin (for later use)
  pinMode(valve1, OUTPUT);
  pinMode(valve2, OUTPUT);
  pinMode(valve3, OUTPUT);

  //Set the oxidizer valve pins as outputs (for later use)
  pinMode(oxidizer_valves1, OUTPUT);
  pinMode(oxidizer_valves2, OUTPUT);
  pinMode(oxidizer_valves3, OUTPUT)

  //Set the fuel valve pins as outputs (for later use)
  pinMode(fuel_valves1, OUTPUT);
  pinMode(fuel_valves2, OUTPUT);
  pinMode(fuel_valves3, OUTPUT);

  //Send TestActi until we receive CtrlActi
  while (incoming_Signal != CTRL_ACTI) {
    if (Serial.available() >= CONTROL_ROOM_RESPONSE_SIZE) {
      Serial.readBytes(dataIn, CONTROL_ROOM_RESPONSE_SIZE);  //Read incoming signal into dataIn array
      incoming_Signal = String(dataIn);  //Verify if incoming_Signal = "CtrlActi"
      continue;
      }
      Serial.print(TEST_ACTI);  //Send TestActi (if not CtrlActi)
      delay(1000);
    }
  Serial.println("Comms Established!"); //"Communications Established"
}

//Start collecting data
void readSensors(sensors &sensorData) { // Temporarily data (engine_control.ino)
  sensorData.loadCell += 0.01;
  sensorData.thermocouple += 0.01;
  sensorData.pressure[1] += 0.01;
  sensorData.pressure[2] += 0.01;
  sensorData.pressure[3] += 0.01;
  sensorData.pressure[4] += 0.01;
  sensorData.pressure[5] += 0.01;
  sensorData.pressure[6] += 0.01;
}
void sendSensorData(const sensors &sensorData) {
  Serial.print("LoadCell: ");
  Serial.println(sensorData.loadCell);

  Serial.print("Thermocouple: ");
  Serial.println(sensorData.thermocouple);

  for (int i{1}; i <= 6; i++) {
    Serial.print("Pressure[");
    Serial.print(i);
    Serial.print("]: ");
    Serial.println(sensorData.pressure[i]);
  }
}
void LogStart() {
  if (incoming_Signal == LOG_STR) {
    Serial.println("Start Data Logging...");
    while (true) {
      readSensors(sensorData);
      sendSensorData(sensorData);
      if (Serial.available() >= CONTROL_ROOM_RESPONSE_SIZE) {
        Serial.readBytes(dataIn, CONTROL_ROOM_RESPONSE_SIZE);
        incoming_Signal = String(dataIn);
        if (incoming_Signal == ABORT_SIG) {
          Serial.println("Stopping Data Logging...");
          break;
        }
      }
      delay(1000);
    }
  } else {
    Serial.println("Invalid Signal. Waiting for LogStart...");
  }
}

//Assign Pin Numbers (Temporarily)
const int value1{7};
const int value2{8};
const int value3{9};

void InertGas() {
  if (incoming_Signal == INERT_FLW) {
    Serial.println("Inert gas flush starts");
    //Open valves for inert gas flush
    digitalWrite(valve1, HIGH);
    digitalWrite(valve2, HIGH);
    digitalWrite(valve3, HIGH);
    while (true) {
      readSensors(sensorData);
      sendSensorData(sensorData);
      if (Serial.available() >= CONTROL_ROOM_RESPONSE_SIZE) {
        Serial.readBytes(dataIn, CONTROL_ROOM_RESPONSE_SIZE);
        incoming_Signal = String(dataIn);
        if (incoming_Signal == ABORT_SIG) {
          Serial.println("Inert gas flush stops");
          //Close the valves
          digitalWrite(valve1, LOW);
          digitalWrite(valve2, LOW);
          digitalWrite(valve3, LOW);
          break;
        }
      }
      delay(1000);
    }
  } else {
    Serial.println("Invalid Signal. Waiting for InertFlw...")
  }
}

//Assign Pin Numbers for Fuel and Oxidizer Valves (Temporarily)
const int oxidizer_valves1{10};
const int oxidizer_valves2{11};
const int oxidizer_valves3{12};

const int fuel_valves1 = 13;
const int fuel_valves2 = A0;
const int fuel_valves3 = A1;

void Ignition() {
  if (incoming_Signal == IGN) {
    Serial.println("Ignition starts");
    // Open oxidizer valves for ignition
    digitalWrite(oxidizer_valves1, HIGH);
    digitalWrite(oxidizer_valves2, HIGH);
    digitalWrite(oxidizer_valves3, HIGH);
    // Open fuel valves for ignition
    digitalWrite(fuel_valves1, HIGH);
    digitalWrite(fuel_valves2, HIGH);
    digitalWrite(fuel_valves3, HIGH);
    while (true) {
      readSensors(sensorData);
      sendSensorData(sensorData);
      if (Serial.available() >= CONTROL_ROOM_RESPONSE_SIZE) {
        Serial.readBytes(dataIn, CONTROL_ROOM_RESPONSE_SIZE);
        incoming_Signal = String(dataIn);
        if (incoming_Signal == ABORT_SIG) {
          Serial.println("Ignition Stops");
          // Close oxidizer valves
          digitalWrite(oxidizer_valves1, LOW);
          digitalWrite(oxidizer_valves2, LOW);
          digitalWrite(oxidizer_valves3, LOW);
          // Close fuel valves
          digitalWrite(fuel_valves1, LOW);
          digitalWrite(fuel_valves2, LOW);
          digitalWrite(fuel_valves3, LOW);
          break;
        }
      }
      delay(1000);
    }
  } else {
    Serial.println("Invalid Signal. Waiting for Ignition...");
  }
}
