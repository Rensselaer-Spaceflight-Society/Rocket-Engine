#include <string.h>
#include <time.h>
#include <stdlib.h>

constexpr int CONTROL_ROOM_RESPONSE_SIZE{8};
constexpr int BAUD_RATE{9600};

constexpr char CTRL_ACTI[] = "CtrlActi";
constexpr char TEST_ACTI[] = "TestActi";
constexpr char LOG_START[] = "LogStart";

char dataIn[16];  //Using a regular C-style array
String incoming_Signal;

struct sensors {
  float loadCell;
  float thermocouple;
  float pressure[6];
};
sensors sensorData{0};

void setup() {
    Serial.begin(BAUD_RATE);  //Start Serial1 for communication with Control Room
    
    //Send TestActi until we receive CtrlActi
    while (incoming_Signal != CTRL_ACTI) {
        if (Serial.available() >= CONTROL_ROOM_RESPONSE_SIZE) {
            Serial.readBytes(dataIn, CONTROL_ROOM_RESPONSE_SIZE);  //Read incoming signal into dataIn array
            incoming_Signal = String(dataIn);  //Verify if incoming_Signal = "CtrlActi"
            continue;
        }
        Serial.print(TEST_ACTI);  //Send TestActi (if not CtrlActi)
        delay(1000);
    }
    
    Serial.println("Comms Established!");
}

//Start collecting data
void readSensors(sensors &sensorData) { // Temporarily data (engine_control.ino)
  sensorData.loadCell += 0.01;
  sensorData.thermocouple += 0.01;
  sensorData.pressure[1] += 0.01;
  sensorData.pressure[2] += 0.01;
  sensorData.pressure[3] += 0.01;
  sensorData.pressure[4] += 0.01;
  sensorData.pressure[5] += 0.01;
  sensorData.pressure[6] += 0.01;
}
void sendSensorData(const sensors &sensorData) {
  Serial.print("LoadCell: ");
  Serial.println(sensorData.loadCell);

  Serial.print("Thermocouple: ");
  Serial.println(sensorData.thermocouple);

  for (int i{1}; i <= 6; i++) {
    Serial.print("Pressure[");
    Serial.print(i);
    Serial.print("]: ");
    Serial.println(sensorData.pressure[i]);
  }
}
void LogStart() {
  if (incoming_Signal == LOG_START) {
    Serial.println("Start Data Logging...");
    while (true) {
      readSensors(sensorData);
      sendSensorData(sensorData);
      if (Serial.available() >= CONTROL_ROOM_RESPONSE_SIZE) {
        Serial.readBytes(dataIn, CONTROL_ROOM_RESPONSE_SIZE);
        incoming_Signal = String(dataIn);
        if (incoming_Signal == "StopLogs") {
          Serial.println("Stopping Data Logging...");
          break;
        }
      }
      delay(1000);
    }
  } else {
    Serial.println("Invalid Signal. Waiting for LogStart...");
  }
}
